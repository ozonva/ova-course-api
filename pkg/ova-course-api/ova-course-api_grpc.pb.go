// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_course_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourseClient is the client API for Course service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseClient interface {
	// Создание курса
	CreateCourseV1(ctx context.Context, in *CreateCourseV1Request, opts ...grpc.CallOption) (*SuccessV1, error)
	// Описание курса
	DescribeCourseV1(ctx context.Context, in *DescribeCourseV1Request, opts ...grpc.CallOption) (*DescribeCourseV1Response, error)
	// Список всех доступных курсов
	ListCourseV1(ctx context.Context, in *ListCourseV1Request, opts ...grpc.CallOption) (*ListCourseV1Response, error)
	// Удаление курса
	RemoveCourseV1(ctx context.Context, in *RemoveCourseV1Request, opts ...grpc.CallOption) (*SuccessV1, error)
	// Множественное добавление курсов
	MultiCreateCourseV1(ctx context.Context, in *MultiCreateCourseV1Request, opts ...grpc.CallOption) (*MultiCreateCourseV1Response, error)
	// Обновление курса
	UpdateCourseV1(ctx context.Context, in *UpdateCourseV1Request, opts ...grpc.CallOption) (*SuccessV1, error)
}

type courseClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseClient(cc grpc.ClientConnInterface) CourseClient {
	return &courseClient{cc}
}

func (c *courseClient) CreateCourseV1(ctx context.Context, in *CreateCourseV1Request, opts ...grpc.CallOption) (*SuccessV1, error) {
	out := new(SuccessV1)
	err := c.cc.Invoke(ctx, "/ova.course.api.Course/CreateCourseV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) DescribeCourseV1(ctx context.Context, in *DescribeCourseV1Request, opts ...grpc.CallOption) (*DescribeCourseV1Response, error) {
	out := new(DescribeCourseV1Response)
	err := c.cc.Invoke(ctx, "/ova.course.api.Course/DescribeCourseV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) ListCourseV1(ctx context.Context, in *ListCourseV1Request, opts ...grpc.CallOption) (*ListCourseV1Response, error) {
	out := new(ListCourseV1Response)
	err := c.cc.Invoke(ctx, "/ova.course.api.Course/ListCourseV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) RemoveCourseV1(ctx context.Context, in *RemoveCourseV1Request, opts ...grpc.CallOption) (*SuccessV1, error) {
	out := new(SuccessV1)
	err := c.cc.Invoke(ctx, "/ova.course.api.Course/RemoveCourseV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) MultiCreateCourseV1(ctx context.Context, in *MultiCreateCourseV1Request, opts ...grpc.CallOption) (*MultiCreateCourseV1Response, error) {
	out := new(MultiCreateCourseV1Response)
	err := c.cc.Invoke(ctx, "/ova.course.api.Course/MultiCreateCourseV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) UpdateCourseV1(ctx context.Context, in *UpdateCourseV1Request, opts ...grpc.CallOption) (*SuccessV1, error) {
	out := new(SuccessV1)
	err := c.cc.Invoke(ctx, "/ova.course.api.Course/UpdateCourseV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServer is the server API for Course service.
// All implementations must embed UnimplementedCourseServer
// for forward compatibility
type CourseServer interface {
	// Создание курса
	CreateCourseV1(context.Context, *CreateCourseV1Request) (*SuccessV1, error)
	// Описание курса
	DescribeCourseV1(context.Context, *DescribeCourseV1Request) (*DescribeCourseV1Response, error)
	// Список всех доступных курсов
	ListCourseV1(context.Context, *ListCourseV1Request) (*ListCourseV1Response, error)
	// Удаление курса
	RemoveCourseV1(context.Context, *RemoveCourseV1Request) (*SuccessV1, error)
	// Множественное добавление курсов
	MultiCreateCourseV1(context.Context, *MultiCreateCourseV1Request) (*MultiCreateCourseV1Response, error)
	// Обновление курса
	UpdateCourseV1(context.Context, *UpdateCourseV1Request) (*SuccessV1, error)
	mustEmbedUnimplementedCourseServer()
}

// UnimplementedCourseServer must be embedded to have forward compatible implementations.
type UnimplementedCourseServer struct {
}

func (UnimplementedCourseServer) CreateCourseV1(context.Context, *CreateCourseV1Request) (*SuccessV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourseV1 not implemented")
}
func (UnimplementedCourseServer) DescribeCourseV1(context.Context, *DescribeCourseV1Request) (*DescribeCourseV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCourseV1 not implemented")
}
func (UnimplementedCourseServer) ListCourseV1(context.Context, *ListCourseV1Request) (*ListCourseV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourseV1 not implemented")
}
func (UnimplementedCourseServer) RemoveCourseV1(context.Context, *RemoveCourseV1Request) (*SuccessV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCourseV1 not implemented")
}
func (UnimplementedCourseServer) MultiCreateCourseV1(context.Context, *MultiCreateCourseV1Request) (*MultiCreateCourseV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateCourseV1 not implemented")
}
func (UnimplementedCourseServer) UpdateCourseV1(context.Context, *UpdateCourseV1Request) (*SuccessV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourseV1 not implemented")
}
func (UnimplementedCourseServer) mustEmbedUnimplementedCourseServer() {}

// UnsafeCourseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServer will
// result in compilation errors.
type UnsafeCourseServer interface {
	mustEmbedUnimplementedCourseServer()
}

func RegisterCourseServer(s grpc.ServiceRegistrar, srv CourseServer) {
	s.RegisterService(&Course_ServiceDesc, srv)
}

func _Course_CreateCourseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).CreateCourseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.course.api.Course/CreateCourseV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).CreateCourseV1(ctx, req.(*CreateCourseV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_DescribeCourseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCourseV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).DescribeCourseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.course.api.Course/DescribeCourseV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).DescribeCourseV1(ctx, req.(*DescribeCourseV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_ListCourseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).ListCourseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.course.api.Course/ListCourseV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).ListCourseV1(ctx, req.(*ListCourseV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_RemoveCourseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCourseV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).RemoveCourseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.course.api.Course/RemoveCourseV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).RemoveCourseV1(ctx, req.(*RemoveCourseV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_MultiCreateCourseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateCourseV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).MultiCreateCourseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.course.api.Course/MultiCreateCourseV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).MultiCreateCourseV1(ctx, req.(*MultiCreateCourseV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_UpdateCourseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).UpdateCourseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.course.api.Course/UpdateCourseV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).UpdateCourseV1(ctx, req.(*UpdateCourseV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Course_ServiceDesc is the grpc.ServiceDesc for Course service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Course_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.course.api.Course",
	HandlerType: (*CourseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourseV1",
			Handler:    _Course_CreateCourseV1_Handler,
		},
		{
			MethodName: "DescribeCourseV1",
			Handler:    _Course_DescribeCourseV1_Handler,
		},
		{
			MethodName: "ListCourseV1",
			Handler:    _Course_ListCourseV1_Handler,
		},
		{
			MethodName: "RemoveCourseV1",
			Handler:    _Course_RemoveCourseV1_Handler,
		},
		{
			MethodName: "MultiCreateCourseV1",
			Handler:    _Course_MultiCreateCourseV1_Handler,
		},
		{
			MethodName: "UpdateCourseV1",
			Handler:    _Course_UpdateCourseV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ova-course-api/ova-course-api.proto",
}
